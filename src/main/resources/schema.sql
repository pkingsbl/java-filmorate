CREATE TABLE IF NOT EXISTS USERS
(
    ID       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL    VARCHAR(20) NOT NULL,
    LOGIN    VARCHAR(20) NOT NULL UNIQUE,
    NAME     VARCHAR(40),
    BIRTHDAY DATE
);
CREATE UNIQUE INDEX IF NOT EXISTS USERS_ID_INDEX ON USERS (ID);

CREATE TABLE IF NOT EXISTS FRIENDS
(
    USER_ID   BIGINT NOT NULL,
    FRIEND_ID BIGINT NOT NULL,
    APPROVE   BOOLEAN,
    CONSTRAINT FK_FRIENDS1 FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_FRIENDS2 FOREIGN KEY (FRIEND_ID) REFERENCES USERS (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS MPA
(
    ID           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME         VARCHAR(10),
    DESCRIPTION  VARCHAR(100)
);
CREATE UNIQUE INDEX IF NOT EXISTS MPA_ID_INDEX ON MPA (ID);

CREATE TABLE IF NOT EXISTS FILMS
(
    ID           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME         VARCHAR(100),
    DESCRIPTION  VARCHAR(200),
    RELEASE_DATE DATE,
    DURATION     INT,
    RATING       INT,
    CONSTRAINT FK_RATING FOREIGN KEY (RATING) REFERENCES MPA (ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS FILMS_ID_INDEX ON FILMS (ID);

CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID BIGINT NOT NULL,
    USER_ID BIGINT NOT NULL,
    CONSTRAINT FK_FILMS FOREIGN KEY (FILM_ID) REFERENCES FILMS (ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_USERS FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS GENRES
(
    ID      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME    VARCHAR(20) NOT NULL
);
CREATE UNIQUE INDEX IF NOT EXISTS GENRE_ID_INDEX ON GENRES (ID);

CREATE TABLE IF NOT EXISTS FILMS_GENRE
(
    FILM_ID     BIGINT NOT NULL,
    GENRE_ID    INT NOT NULL,
    CONSTRAINT FILMS_GENRES_FK_1 FOREIGN KEY (FILM_ID) REFERENCES FILMS (ID) ON DELETE CASCADE ON UPDATE CASCADE ,
    CONSTRAINT FILMS_GENRES_FK_2 FOREIGN KEY (GENRE_ID) REFERENCES GENRES (ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- SELECT * FROM FILMS
--
-- SELECT f.id, f.name, f.description, f.release_date, f.duration, mpa.name AS mpa, l.user_id
--
-- FROM films AS f
--     LEFT JOIN mpa ON f.rating = mpa.id
--     LEFT JOIN likes AS l ON f.ID = l.FILM_ID
-- WHERE f.id = 2
-- --
-- SELECT f.id, f.name, f.description, f.release_date, f.duration, mpa.id AS mpa, l.user_id , fg.genre_id AS genre
--         FROM films AS f
--         LEFT JOIN mpa ON f.rating = mpa.id
--         LEFT JOIN likes AS l ON f.ID = l.FILM_ID
--         LEFT JOIN films_genre AS fg ON f.id = fg.film_id  WHERE f.id = 1;

